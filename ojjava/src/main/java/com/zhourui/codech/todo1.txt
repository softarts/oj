LeetCode题目分类
Hash相关
* q1_两数之和  //ok
链表操作
* q2_两数相加  //m ok
* q19_删除链表的倒数第N个节点  //m ok 做起来有点烦，不过只要分析好
* q61_旋转链表
* q138_复制带随机指针的链表
* q206_反转链表
双指针遍历/滑动窗口
* q3_无重复字符的最长子串  //m ok
* q11_盛最多水的容器  //m ok
* q15_三数之和
* q16_最接近的三数之和
* q26_删除排序数组中的重复项
* q42_接雨水
* q121_买卖股票的最佳时机
* q209_长度最小的子数组  //m ok
快慢指针遍历
* q141_环形链表  //e ok
* q202_快乐数
* q876_链表的中间结点
区间合并
* q56_合并区间  //m ok
字符串操作
* q6_Z字形变换
* q14_最长公共前缀   // 没什么意思的题目
* q736_划分字母区间
数字操作
* q7_整数反转
* q8_字符串转换整数  //e ok
* q9_回文数  //e ok
* q43_字符串相乘
* q172_阶乘后的零
* q258_各位相加  //e O(1) ok
数组操作
* q54_螺旋矩阵
* q73_矩阵置零   //m ok
* q945_使数组唯一的最小增量
栈相关
* q20_有效的括号  //e ok
* q32_最长有效括号
* q155_最小栈
* q224_基本计算器
* q316_去除重复字母  //h ok
堆相关
* q215_数组中的第K个最大元素  //ok
* q347_前K个高频元素
递归
* q21_合并两个有序链表
* q101_对称二叉树
* q104_二叉树的最大深度  //e ok
* q226_翻转二叉树 //e ok
* q236_二叉树的最近公共祖先
分治法/二分法
* q23_合并K个排序链表
* q33_搜索旋转排序数组
* q34_在排序数组中查找元素的第一个和最后一个位置
动态规划
* q5_最长回文子串  //m ok
* q53_最大子序和
* q62_不同路径
* q64_最小路径和  //m ok
* q70_爬楼梯
* q118_杨辉三角
* q300_最长上升子序列  //m ok
* q746_使用最小花费爬楼梯  /e ok
* q1277_统计全为1的正方形子矩阵
回溯法
* q10_正则表达式匹配  //h
* q22_括号生成
* q46_全排列   // ok
树的遍历
* q94_二叉树的中序遍历  //m ok
* q102_二叉树的层次遍历
* q110_平衡二叉树
* q144_二叉树的前序遍历  //h ok
* q145_二叉树的后序遍历  //h ok
二叉搜索树相关
* q98_验证二叉搜索树  //m ok有点技巧的,pass min max
* q450_删除二叉搜索树中的节点
* q701_二叉搜索树中的插入操作  //m ok


linkedlist
toDo.offer(parent.left);//push 是插到linkedlist起始，faint!

double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size();
        int n = nums2.size();
        if (m>n) {
            return findMedianSortedArrays(nums2, nums1);
        }
        int low=0,high=m;
        double result = 0;

        while (low<=high) {
            int partx = (high+low)/2;
            int party = (m+n+1)/2-partx;  // partx+party = (m+n+1)/2

            int leftxmax = (partx>0?nums1[partx-1]:INT_MIN);
            int rightxmin = (partx<m?nums1[partx]:INT_MAX);

            int leftymax = (party>0?nums2[party-1]:INT_MIN);
            int rightymin = (party<n?nums2[party]:INT_MAX);

            if (leftxmax <= rightymin && leftymax <= rightxmin) {
                if ((n+m)%2==0) {
                    result = (double)(max(leftxmax,leftymax) + min(rightxmin,rightymin))/2.0;
                } else {
                    result = (double)max(leftxmax,leftymax);
                }
                break;
            } else if (leftymax>rightxmin){
                low = partx+1;
            } else {
                high = partx-1;
            }
        }
        return result;
    }